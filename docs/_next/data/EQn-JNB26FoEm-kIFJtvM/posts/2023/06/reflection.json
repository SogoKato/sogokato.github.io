{"pageProps":{"posts":[{"title":"AWS SigV4リクエストの「検証する側」を実装する","date":"2023-11-09T00:00:00.000Z","ref":"/posts/2023/11/implementing-aws-sigv4-server","desc":" 世の中には AWS Signature V4 署名の実装方法についての記事はたくさんありますが、その署名を付与して検証する側（サーバー）の実装方法について見つけるのは難しいです。AWS API Gateway を使えば簡単に自分で書かなくても良いのでそれはそうなのですが、AWS SigV4 は curl のオプションとしても使える くらいの地位を獲得しているので、AWS SigV4 を利用した認証機能の実装方法についての記事があってもいいでしょう。\n\nということで、今回は Python と FastAPI","draft":false,"tags":[{"name":"認証/認可","ref":"/tags/認証-認可"},{"name":"AWS","ref":"/tags/aws"},{"name":"Python","ref":"/tags/python"},{"name":"FastAPI","ref":"/tags/fastapi"}],"showTerminalAside":false},{"title":"Bitwardenブラウザ拡張がPasskeyに対応したので試してみた","date":"2023-11-08T00:00:00.000Z","ref":"/posts/2023/11/bitwarden-passkey","desc":" パスワードマネージャによる Passkey のサポートが進んでいます。\n\n私は Bitwarden を使ってパスワードなどの機密情報を保存しているのですが、ついに Bitwarden による Passkey 対応が始まりました。公式ブログでも11月7日に投稿されています。\n\n## 環境\n\n* Bitwarden Firefox アドオン 2023.10.1\n* Firefox 118.0.2\n\n## 試してみる\n\n既にいくつものサービスが Passkey 対応していますが、今回は Google アカウント","draft":false,"tags":[{"name":"Passkey","ref":"/tags/passkey"},{"name":"Bitwarden","ref":"/tags/bitwarden"},{"name":"認証/認可","ref":"/tags/認証-認可"}],"showTerminalAside":false},{"title":"GitLabのRemote developmentを試してみる","date":"2023-10-24T00:00:00.000Z","ref":"/posts/2023/10/gitlab-remote-development","desc":" VS Code Serverでリモートホストのコンテナ上開発環境に直接アクセスするの記事にて GitHub でやっている「ぼくのかんがえたさいきょうのかいはつかんきょう」第2弾です。今回は GitLab を使ってリモート開発環境を構築してみたいと思います。  \nなお、GitLab には Premium 以上のライセンスで使える Workspaces という機能が 16.0 で登場しましたが、今回はそれではなく、自分でコンテナを立ててそこにアクセスする形になります。こちらは無料ライセンスで使えます。ただし執","draft":false,"tags":[{"name":"GitLab","ref":"/tags/gitlab"},{"name":"開発環境","ref":"/tags/開発環境"}],"showTerminalAside":false},{"title":"GitHub ActionsでGo製ツールをビルド&リリース【GoReleaser】","date":"2023-09-26T00:00:00.000Z","ref":"/posts/2023/09/github-actions-goreleaser","desc":" 前回の記事で紹介した nifdiff をリリースする際に、簡単に GitHub actions を使って Go 製ツールをビルドしてリリースする方法を見つけたのでメモです。\n\n## ポイント\n\n* GoReleaser を使うと Go で作ったソフトウェアを素早く出荷できる\n* kyoh86/git-vertag-action を使うと最新のバージョンから +1 メジャー・マイナー・パッチバージョンアップしたバージョンのタグを作成できる\n\n## 今回やったこと\n\n* Go 製ツールをクロスコンパイルして、","draft":false,"tags":[{"name":"Go","ref":"/tags/go"},{"name":"GitHub","ref":"/tags/github"},{"name":"CI/CD","ref":"/tags/ci-cd"}],"showTerminalAside":false},{"title":"ニフクラのリソースを比較できるツールnifdiffを作った","date":"2023-09-25T00:00:00.000Z","ref":"/posts/2023/09/nifdiff","desc":" 2つのファイアウォールグループのルールの差分を見たいことがあって、ちょっとしたツールを作ってみました。\n\n## nifdiff とは\n\n* 2つのニフクラリソースの差分を見ることができるツール\n* 同一アカウント内であれば、リージョンまたぎで比較できる\n* 現状対応しているのはファイアウォールグループのみ\n\nhttps://github.com/SogoKato/nifdiff\n\nこんな感じのコマンドを投げると\n\n```\nnifdiff nrn:nifcloud:computing:jp-east-1::","draft":false,"tags":[{"name":"ニフクラ","ref":"/tags/ニフクラ"},{"name":"Go","ref":"/tags/go"}],"showTerminalAside":false},{"title":"AWS Certified Solutions Architect - Professionalを取得した","date":"2023-09-21T00:00:00.000Z","ref":"/posts/2023/09/aws-solutions-architect-professional","desc":" AWS 認定ソリューションアーキテクト - Professional (SAP-C02) の資格を取得したので学習メモです。\n\n過去の資格に関する記事はこちら\n* AWS Certified Solutions Architect - Associateを取得した\n* CKAD受検記録【2023年版】\n* GCP未経験の新卒2年目がAssociate Cloud EngineerとProfessional Cloud Architectを連続で受検したときの記録\n* 新卒エンジニアがCKA取得を目指してK","draft":false,"tags":[{"name":"AWS","ref":"/tags/aws"},{"name":"資格","ref":"/tags/資格"}],"showTerminalAside":false},{"title":"FluentdをDocker SwarmにDaemonSet的に配置してログを収集する","date":"2023-09-15T00:00:00.000Z","ref":"/posts/2023/09/fluentd-docker-swarm","desc":" Docker Swarm 上のサービスのログを fluentd を使って送信するためのメモです。\n\nKubernetes で同様のことを実現する場合、Forwarder として使う fluentd を DaemonSet として起動してノード上のログを集めさせることが一般的です。今回は Swarm クラスター内の各ノードに1つずつ fluentd を起動して、あるノード上で動くコンテナのログはそのノード上の fluentd に集まるように設定していきます。\n\n## ポイント\n\n* 各ノードに配置するには ","draft":false,"tags":[{"name":"Fluentd","ref":"/tags/fluentd"},{"name":"Docker","ref":"/tags/docker"}],"showTerminalAside":false},{"title":"Raspberry Pi Zero WHにVolumio 3を入れる場合は2系からアップグレードする","date":"2023-09-09T00:00:00.000Z","ref":"/posts/2023/09/volumio-raspberrypi-zero","desc":" 掲題の通りです。今更ながら、その辺に転がっているラズパイゼロ（初代、Wi-Fi 付）とその辺に転がっている中華 USB-DAC を使って Spotify Connect 用の環境を整えようと Volumio を入れてみました。\n\n## 使ったもの\n\n* Raspberry Pi Zero WH\n* Micro SD\n* 電源（Apple の 5W 1A のやつで十分）\n* Micro USB ケーブル\n* USB OTG ケーブル（Micro USB オスから USB A メスに変換するやつ）\n* Min","draft":false,"tags":[{"name":"Volumio","ref":"/tags/volumio"},{"name":"Raspberry Pi","ref":"/tags/raspberry-pi"}],"showTerminalAside":false},{"title":"AWS Certified Solutions Architect - Associateを取得した","date":"2023-08-13T00:00:00.000Z","ref":"/posts/2023/08/aws-solutions-architect-associate","desc":" AWS 認定ソリューションアーキテクト - Associate (SAA-C03) の資格を取得したので学習メモです。\n\n過去の資格に関する記事はこちら\n* CKAD受検記録【2023年版】\n* GCP未経験の新卒2年目がAssociate Cloud EngineerとProfessional Cloud Architectを連続で受検したときの記録\n* 新卒エンジニアがCKA取得を目指してKubernetesを勉強したときの記録\n\n続きの記事 → AWS Certified Solutions Arc","draft":false,"tags":[{"name":"AWS","ref":"/tags/aws"},{"name":"資格","ref":"/tags/資格"}],"showTerminalAside":false},{"title":"SynologyのHyper Backupを使って自分のサーバーへバックアップ（rsync over SSH）","date":"2023-07-22T00:00:00.000Z","ref":"/posts/2023/07/synology-hyper-backup-rsync-over-ssh","desc":" 先日 Synology の NAS を導入したのですが、耐障害性を考慮すると別の拠点とのバックアップが欲しくなってきます。Synology の NAS は QuickConnect を利用することで Synology 社のサーバーを経由することで、自宅のポートを開放せずに構築することができるのがメリットです。バックアップ用途のためだけでにポートを開放するのはアレなので、自宅からのアウトバウンドの通信で定期的にバックアップを行う方法を検討しました。\n\n## 構成\n\n超シンプル構成です。\n\n!構成図\n\nNAS","draft":false,"tags":[{"name":"Synology","ref":"/tags/synology"},{"name":"NAS","ref":"/tags/nas"},{"name":"rsync","ref":"/tags/rsync"}],"showTerminalAside":false},{"title":"Fluentdでニフクラのオブジェクトストレージサービスにログを送る","date":"2023-07-05T00:00:00.000Z","ref":"/posts/2023/07/fluentd-nifcloud-object-storage-service","desc":" Fluentd の fluent-plugin-s3 を使ってニフクラのオブジェクトストレージサービスにログをアップロードする時のメモです。\n\n## ポイント\n\n* `s3_endpoint` を指定する\n  * https://jp-east-1.storage.api.nifcloud.com または https://jp-west-2.storage.api.nifcloud.com\n  * 参照: エンドポイント\n* `force_path_style` を true にする\n  * オブジェクト","draft":false,"tags":[{"name":"Fluentd","ref":"/tags/fluentd"},{"name":"ニフクラ","ref":"/tags/ニフクラ"},{"name":"ログ","ref":"/tags/ログ"}],"showTerminalAside":false},{"title":"シンプル思考を徹底しよう：この半年の振り返り","date":"2023-06-25T00:00:00.000Z","ref":"/posts/2023/06/reflection","desc":" 先日、この半年くらい担当させてもらった仕事が一区切りついたので振り返りをしておこうかなと思います。\n\n全部よくある話だと思いますが、「経験しないとわからないこともあるものだ」ということで、今回は思考垂れ流し回です。\n\n## とにかく余裕を\n\n取り掛かり始めたころ、諸先輩方にファーストリリースではとにかく最低限のものを作るように言われたが、今ならそれが身に沁みてわかる。スケジュール的に余裕を持たせる効果のほか、エンハンスの伸びしろも大きくなるので、リリース後に機能拡充していくことで対外的な見た目が良くなる効","draft":false,"tags":[{"name":"Personal","ref":"/tags/personal"}],"showTerminalAside":false},{"title":"KubernetesのPodからラズパイのGPIOを操作する","date":"2023-06-24T00:00:00.000Z","ref":"/posts/2023/06/k8s-raspi-gpio","desc":" 今まで Docker Compose で動かしてたアプリを Kubernetes に移植したときのメモです。\n\n## Docker Compose では\n\nDocker の `--device` オプションと同じ記法で指定できていました。\n\n```yaml\nservices:\n  app:\n    image: hoge\n    devices:\n      - /dev/gpiomem\n```\n\n## Kubernetes では\n\nデバイスプラグインを使用して Kubelet にハードウェアリソースを知","draft":false,"tags":[{"name":"Kubernetes","ref":"/tags/kubernetes"},{"name":"Raspberry Pi","ref":"/tags/raspberry-pi"}],"showTerminalAside":false},{"title":"Ubuntu 22.04ではusercfg.txtがデフォルトでincludeされていないので注意","date":"2023-06-14T00:00:00.000Z","ref":"/posts/2023/06/ubuntu-22.04-raspi-config.txt","desc":" タイトルの通りです。これにしばらくハマってしまったので戒めのために書いておきます。\n\n## tl;dr\n\nUbuntu 20.04 の時と同じ設定ファイルをラズパイの /boot/firmware に入れていたけど反映されていなかった。調べてみたらそのファイルを include する文が Ubuntu 22.04 では消されていた。\n\n## そもそも config.txt とは？\n\n> The Raspberry Pi uses a configuration file instead of the BI","draft":false,"tags":[{"name":"Ubuntu","ref":"/tags/ubuntu"},{"name":"Raspberry Pi","ref":"/tags/raspberry-pi"}],"showTerminalAside":false},{"title":"ラズパイでK3sクラスター構築","date":"2023-06-13T00:00:00.000Z","ref":"/posts/2023/06/k3s-setup","desc":" 今まで kubeadm でクラスター運用をしていたのですが、ラズパイくんたちのお引越しの関係で再構築することにしました。Raspberry Pi 4B 2GB や 3A+（RAM 512MB）も join させたかったこともあり、エッジ環境での動作も想定されている K3s を選びました。\n\n## 環境\n\n* Raspberry Pi 4B 8GB x 2, Raspberry Pi 4B 4GB x 1, Raspberry Pi 4B 2GB x 1\n  * SSD ブート\n  * PoE+ 電源\n  ","draft":false,"tags":[{"name":"Kubernetes","ref":"/tags/kubernetes"},{"name":"K3s","ref":"/tags/k3s"},{"name":"Raspberry Pi","ref":"/tags/raspberry-pi"}],"showTerminalAside":false},{"title":"CeleryにおけるSQLAlchemyのセッション管理","date":"2023-05-15T00:00:00.000Z","ref":"/posts/2023/05/celery-sqlalchemy","desc":" 前回の記事では SQLAlchemy の Session について解説しました。今回はその応用として、Celery においてどのように Session を管理するかを考えたいと思います。\n\n関連記事：\n* SQLAlchemyのセッション・トランザクションを理解する\n* SQLAlchemyで'MySQL server has gone away'が発生した時の対処法2つ\n\n## 結論\n\n以下のように DB 操作を行うタスクのためのクラスを作ります。\n\n```python\nfrom typing impo","draft":false,"tags":[{"name":"Python","ref":"/tags/python"},{"name":"SQLAlchemy","ref":"/tags/sqlalchemy"},{"name":"データベース","ref":"/tags/データベース"},{"name":"Celery","ref":"/tags/celery"}],"showTerminalAside":false},{"title":"SQLAlchemyのセッション・トランザクションを理解する","date":"2023-05-14T00:00:00.000Z","ref":"/posts/2023/05/sqlalchemy-sessions-and-transactions","desc":" SQLAlchemy の Session や scoped_session、トランザクションに関して理解していきます。\n\n## 用語おさらい\n\n### セッション（Session）\n\nSQLAlchemy の Session オブジェクトは、ORM マッピングされたオブジェクトの永続化に関する操作を管理するオブジェクトです。\n\n`sqlalchemy.orm.Session` を直接インスタンス化しても良いですが、実環境では sessionmaker を使うことが一般的です。sessionmaker は ","draft":false,"tags":[{"name":"Python","ref":"/tags/python"},{"name":"SQLAlchemy","ref":"/tags/sqlalchemy"},{"name":"データベース","ref":"/tags/データベース"}],"showTerminalAside":true},{"title":"Reactで検索・ソート可能なDataTableを自作する","date":"2023-04-22T00:00:00.000Z","ref":"/posts/2023/04/datatable-react","desc":" 最近、MUI の妹分の UI ライブラリである Joy-UI を使ってます。現在進行形で活発に開発が進んでいて、設計（デザイン）も今時な感じで好感触です。ところどころまだ開発されていないコンポーネントもちらほらあるものの、ドキュメントには代替策がコード付きで載っていてとても親切です。\n\nMUI X というより発展的なコンポーネントをもつ UI ライブラリもあるのですが、そこに今回のテーマである「データテーブル」に該当する Data Grid というものがあります。これは超すごくて、雑に言うと Excel ","draft":false,"tags":[{"name":"React","ref":"/tags/react"},{"name":"Joy-UI","ref":"/tags/joy-ui"}],"showTerminalAside":false},{"title":"Kanikoでコンテナイメージつくるならcache=trueは有効にしておこう","date":"2023-04-18T00:00:00.000Z","ref":"/posts/2023/04/kaniko-cache","desc":" !ぜんぜんわからない　俺たちは雰囲気でカニコをやっている\n\n恥ずかしながら、わたしは雰囲気で kaniko にコンテナイメージのビルドをしてもらっていることに気づきました。1年以上 GitLab CI で kaniko を使っておきながら、ただ「特権コンテナを使わずにイメージつくれるやつ」くらいの認識しかしていなかったです。\n\n## kaniko の cache=true オプション\n\nkaniko には `--cache` というフラグがあり、これを true にすることでコンテナのビルド時にキャッシュ","draft":false,"tags":[{"name":"Kaniko","ref":"/tags/kaniko"},{"name":"CI/CD","ref":"/tags/ci-cd"},{"name":"コンテナ","ref":"/tags/コンテナ"},{"name":"GitLab","ref":"/tags/gitlab"}],"showTerminalAside":false},{"title":"IPoE回線の自宅のWebサービスをVPN経由で固定IPのクラウドから公開する","date":"2023-04-15T00:00:00.000Z","ref":"/posts/2023/04/reverse-proxy-to-home-ipoe-network","desc":" PPPoE 回線が遅いので IPoE（IPv4 over IPv6）へ移行しようと思いました。以前は2つのルーターを使って、PPPoE と IPoE の2セッションを張ることができたのですが、ある時からできなくなり、しばらく PPPoE だけで生活していました。とはいえやはり遅い、遅すぎる……ということで、今回の記事に至ります。\n\nIPoE に移行するにあたっての課題は**任意のポートを開放できないこと**です。\n\n代わりの方法を考えていたところ、ちょうど手元に1台 AWS Lightsail のサーバー","draft":false,"tags":[{"name":"自宅サーバー","ref":"/tags/自宅サーバー"},{"name":"ネットワーク","ref":"/tags/ネットワーク"},{"name":"VPN","ref":"/tags/vpn"},{"name":"WireGuard","ref":"/tags/wireguard"},{"name":"HAProxy","ref":"/tags/haproxy"}],"showTerminalAside":false},{"title":"CKAD受検記録【2023年版】","date":"2023-03-30T00:00:00.000Z","ref":"/posts/2023/03/certified-kubernetes-application-developer","desc":" 2023年3月30日に Certified Kubernetes Application Developer (CKAD) を受験し、合格しましたのでその受検記録記事です。ちょうど1年前に Certified Kuberenetes Administrator (CKA) を取っていたので、その続きとなります。\n\n前回の記事：新卒エンジニアがCKA取得を目指してKubernetesを勉強したときの記録\n\n## 対象読者\n\n* Kubernetes を使っているが、資格はまだ取ってない人\n* CKA を取っ","draft":false,"tags":[{"name":"Kubernetes","ref":"/tags/kubernetes"},{"name":"資格","ref":"/tags/資格"}],"showTerminalAside":false},{"title":"PyScriptを使ってブログのサンプルコードを実行させる","date":"2023-03-06T00:00:00.000Z","ref":"/posts/2023/03/pyscript-codeblock","desc":" 前回の記事を書くときに WebAssembly でブログのコードブロックのコードを実行させられたら面白いかも、ということで PyScript を使って実装してみました。React & Next.js で使う際の注意点についても書こうと思います。\n\n以下については前提知識としてこの記事では解説しません。\n\n* PyScript\n* Pyodide\n* WebAssembly\n* react-markdown のコードブロック（バッククォート3つ \\```）をカスタマイズする方法\n\n## やったこと\n\n* r","draft":false,"tags":[{"name":"Python","ref":"/tags/python"},{"name":"WebAssembly","ref":"/tags/webassembly"},{"name":"PyScript","ref":"/tags/pyscript"},{"name":"JavaScript","ref":"/tags/javascript"},{"name":"React","ref":"/tags/react"},{"name":"Next.js","ref":"/tags/next.js"}],"showTerminalAside":true},{"title":"Pythonのunittest.mock.patchではどこにパッチするかが重要","date":"2023-03-04T00:00:00.000Z","ref":"/posts/2023/03/python-unittest-mock-where-to-patch","desc":" Python 公式ドキュメントの unittest.mock のページにドンピシャの内容が書いてありますが、なかなか気づけずにハマってしまっていたのでメモです。\n\n`unittest.mock.patch` でパッチしたけど当たってない気がする人は参考にしてみてください。\n\n下記の引用に要点が凝縮されています。\n\n> ### どこにパッチするか\n>\n> `patch()` は (一時的に) ある 名前 が参照しているオブジェクトを別のものに変更することで適用されます。任意のオブジェクトには、それを参照する","draft":false,"tags":[{"name":"Python","ref":"/tags/python"},{"name":"単体テスト","ref":"/tags/単体テスト"}],"showTerminalAside":true},{"title":"Ansibleでgpg公開鍵とaptのサードパーティリポジトリを追加する ～Terraformをインストールしたい～","date":"2023-03-01T00:00:00.000Z","ref":"/posts/2023/03/ansible-apt-repo-signed-by-gpg-key","desc":" apt を使って docker や terraform をインストールする時など、提供元のサードパーティ apt リポジトリを追加する場合が結構ありますよね。その際に、今までは `apt-key` を使って OpenPGP 公開鍵をインポートしていたのですが、`apt-key` は Debian 11 と Ubuntu 22.04 を最後に使えなくなる ので、今後は `gnupg` を使った方法が主流になっていきます。\n\nAnsible にも ansible.builtin.apt_key module ","draft":false,"tags":[{"name":"Ansible","ref":"/tags/ansible"},{"name":"Terraform","ref":"/tags/terraform"},{"name":"APT","ref":"/tags/apt"}],"showTerminalAside":false},{"title":"TerraformでAPI Gatewayのスロットリングを設定する","date":"2023-02-23T00:00:00.000Z","ref":"/posts/2023/02/aws-api-gateway-terraform-throttling-settings","desc":" AWS API Gateway のスロットリングを Terraform を使って設定する方法を見つけるまでに少し手間取ったのでメモ。\n\n## AWS マネジメントコンソールでの場所\n\n今回 Terraform で設定するのは、マネジメントコンソールの各ステージの設定画面内の「デフォルトのメソッドスロットリング」に該当する箇所です。\n\n!management console\n\n## そもそも API Gateway のスロットリングとは\n\nAPI Gateway では API が1秒あたりに処理できるリクエ","draft":false,"tags":[{"name":"AWS","ref":"/tags/aws"},{"name":"API Gateway","ref":"/tags/api-gateway"},{"name":"Terraform","ref":"/tags/terraform"}],"showTerminalAside":false},{"title":"プロセス外依存は統合テストで確認しよう：単体テストの考え方／使い方 第3部","date":"2023-02-22T00:00:00.000Z","ref":"/posts/2023/02/unit-testing-principles-practices-and-patterns-part3","desc":" 『単体テストの考え方／使い方』（Vladimir Khorikov 著、須田智之訳）を読んだので、そのまとめを部ごとに書いていこうと思います。\n\n1. 単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部\n1. リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半\n1. ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半\n1. プロセス外依存は統合テストで確認しよう：単体テストの考え方／使い方 第3部（こ","draft":false,"tags":[{"name":"単体テスト","ref":"/tags/単体テスト"},{"name":"読書","ref":"/tags/読書"}],"showTerminalAside":false},{"title":"ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半","date":"2023-02-19T00:00:00.000Z","ref":"/posts/2023/02/unit-testing-principles-practices-and-patterns-part2-2","desc":" 『単体テストの考え方／使い方』（Vladimir Khorikov 著、須田智之訳）を読んでいるので、そのまとめを部ごとに書いていこうと思います。\n\n1. 単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部\n1. リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半\n1. ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半（この記事）\n1. プロセス外依存は統合テストで確認しよう：単体テストの考え方／使","draft":false,"tags":[{"name":"単体テスト","ref":"/tags/単体テスト"},{"name":"読書","ref":"/tags/読書"}],"showTerminalAside":false},{"title":"FastAPIとSQLAlchemy2.0ならもう型ヒントを諦めなくていい","date":"2023-02-08T00:00:00.000Z","ref":"/posts/2023/02/fastapi-orm-sqlalchemy","desc":" サチコ（Google Search Console）を眺めていたら `FastAPI MySQL` がそれなりに需要ありそうと思ったので、FastAPI と SQLAlchemy を組み合わせて ORM を使う方法を紹介したいと思います。最近の SQLAlchemy（1.4以降）ではマッピングされたオブジェクトに型を適用することもできるので、型ヒントを活かして型安全なコードを書くことも難しくなくなっています。\n\n## 環境\n\n* Python 3.10.6\n* FastAPI 0.89.1\n* SQLAl","draft":false,"tags":[{"name":"Python","ref":"/tags/python"},{"name":"FastAPI","ref":"/tags/fastapi"},{"name":"SQLAlchemy","ref":"/tags/sqlalchemy"},{"name":"ORM","ref":"/tags/orm"}],"showTerminalAside":false},{"title":"TypedDictはdictのsubtypeではないので関数の引数にはMappingを使う","date":"2023-02-06T00:00:00.000Z","ref":"/posts/2023/02/typeddict-is-not-subtype-of-dict","desc":" Python の dict（辞書）を TypeScript の interface のように扱えて便利な TypedDict ですが、**dict のサブクラスではない**というのが少し落とし穴だなと思ったのでメモ。\n\n## まずは PEP を見よう\n\n大抵のことは公式ドキュメントを見れば書いてあります。今回も例外なくそうでした。\n\n> First, any TypedDict type is consistent with `Mapping[str, object]`.\n\nhttps://peps.py","draft":false,"tags":[{"name":"Python","ref":"/tags/python"}],"showTerminalAside":false},{"title":"リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半","date":"2023-02-04T00:00:00.000Z","ref":"/posts/2023/02/unit-testing-principles-practices-and-patterns-part2-1","desc":" 『単体テストの考え方／使い方』（Vladimir Khorikov 著、須田智之訳）を読んでいるので、そのまとめを部ごとに書いていこうと思います。\n\n1. 単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部\n1. リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半（この記事）\n1. ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半\n1. プロセス外依存は統合テストで確認しよう：単体テストの考え方／使","draft":false,"tags":[{"name":"単体テスト","ref":"/tags/単体テスト"},{"name":"読書","ref":"/tags/読書"}],"showTerminalAside":false},{"title":"単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部","date":"2023-01-17T00:00:00.000Z","ref":"/posts/2023/01/unit-testing-principles-practices-and-patterns-part1","desc":" 『単体テストの考え方／使い方』（Vladimir Khorikov 著、須田智之訳）を読んでいるので、そのまとめを部ごとに書いていこうと思います。\n\n1. 単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部（この記事）\n1. リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半\n1. ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半\n1. プロセス外依存は統合テストで確認しよう：単体テストの考え方／使","draft":false,"tags":[{"name":"単体テスト","ref":"/tags/単体テスト"},{"name":"読書","ref":"/tags/読書"}],"showTerminalAside":false},{"title":"SQLAlchemyで'MySQL server has gone away'が発生した時の対処法2つ","date":"2023-01-12T00:00:00.000Z","ref":"/posts/2023/01/sqlalchemy-dealing-with-disconnects","desc":" FastAPI で SQLAlchemy を使っている時に、コンテナを立てた直後は問題ないけど一定時間経過後に DB 接続が切れてしまう問題に遭遇したのでその時に調べたことのメモ。\n\n## 環境\n\n* mysql 5.7.15\n* SQLAlchemy 1.4.45\n* mysqlclient 2.1.1\n\n## 問題\n\n```\nMySQLdb.OperationalError: (2006, 'MySQL server has gone away')\n```\n\n最後に MySQL サーバーに接続してから","draft":false,"tags":[{"name":"Python","ref":"/tags/python"},{"name":"SQLAlchemy","ref":"/tags/sqlalchemy"},{"name":"MySQL","ref":"/tags/mysql"},{"name":"データベース","ref":"/tags/データベース"}],"showTerminalAside":false},{"title":"2023年版 キーボードマッピングの個人的メモ","date":"2023-01-08T00:00:00.000Z","ref":"/posts/2023/01/keyboard-remap","desc":" 不定期的に「あーでもない、こーでもない」と言ってキーボードのマッピングをいじりだしてしまうことってありますよね。私はあります。限りあるキーの中から自分にとっての最適解を見つける作業はなんだかんだ楽しいです。\n\n今回は 2023 年版、私のキーボードのマッピングを書きとめておこうと思います。\n\n過去の記事: Windows10 と PowerToys で US キーボードでも無変換・変換キーを使って IME を一発で切り替える\n\n## 環境\n\n* 使うパソコン\n  * Windows デスクトップ\n  * ","draft":false,"tags":[{"name":"キーボード","ref":"/tags/キーボード"}],"showTerminalAside":false},{"title":"プロキシ環境でKubernetes構築（Containerd+Calico）","date":"2022-12-27T00:00:00.000Z","ref":"/posts/2022/12/kubernetes-behind-proxy","desc":" 同期と一緒にトラシュしたので、プロキシ環境下で kubeadm + Containerd + Calico の Kubernetes クラスターを構築する方法について記録を残します。\n\n## 環境\n\n* Ubuntu 22.04\n  * サーバーはニフクラを利用（e-medium4 2vCPU/4GB）\n* Kubernetes v1.26.0\n* kubeadm v1.26.0\n* Containerd v1.6.14\n* Calico v3.24.5\n\nコントロールプレーン、ノード1台ずつの構成としま","draft":false,"tags":[{"name":"Kubernetes","ref":"/tags/kubernetes"}],"showTerminalAside":false},{"title":"Ubuntu 22.04でのKubernetesクラスター構築（ContainerdとSystemdCgroup）","date":"2022-12-26T00:00:00.000Z","ref":"/posts/2022/12/kubernetes-ubuntu22.04-cgroup-systemd","desc":" 公式ドキュメントのコマンドを手順通り流し込めば割と簡単に構築できる Kubernetes クラスターですが、Ubuntu 22.04 になってから少し手を入れる必要が出てきたので差分を紹介しておきます。\n\n**2022-02-16 更新：Kubernetes ドキュメントの日本語版が更新されていたのでリライトしました。**\n\n## 環境\n\n* Ubuntu 22.04\n* Kubernetes v1.26.0\n* kubeadm v1.26.0\n* Containerd v1.6.16\n\n## 何が変わっ","draft":false,"tags":[{"name":"Kubernetes","ref":"/tags/kubernetes"}],"showTerminalAside":false},{"title":"KubernetesでCoreDNSがループしてしまう問題への対処","date":"2022-12-24T00:00:00.000Z","ref":"/posts/2022/12/kubernetes-coredns-loop","desc":" 1年前にも Kubernetes クラスターを自力で組んでトラブルシューティングしてみる【The Hard Way】の記事の中で軽く解説したネタです。\n\n## 環境\n\n* Ubuntu 22.04\n* Kubernetes v1.26.0\n* kubeadm v1.26.0\n\n## 問題\n\nKubernetes クラスター内で名前解決に使われる CoreDNS の Pod が `CrashLoopBackOff` になってしまい再起動を繰り返す問題が発生することがあります。\n\n```\n# kubectl ","draft":false,"tags":[{"name":"Kubernetes","ref":"/tags/kubernetes"}],"showTerminalAside":false},{"title":"VS Code Serverでリモートホストのコンテナ上開発環境に直接アクセスする","date":"2022-12-17T00:00:00.000Z","ref":"/posts/2022/12/vscode-server-devcontainer","desc":" 今回は「ぼくのかんがえたさいきょうのかいはつかんきょう」を紹介したいと思います。\n\nVS Code Server を使い、リモートサーバー上でコンテナとして動かしている開発環境に直接乗り込んでみよう、というアイデアです。\n\nSSH もポート開放も不要なのでとてもお手軽です。\n\n## 2023/10/24 追記\n\nGitLab のリモート開発環境も試してみました。\n\nGitLabのRemote developmentを試してみる\n\n## 2023/06/14 追記\n\n以下で紹介する方法が最近は使えなくなって","draft":false,"tags":[{"name":"VS Code","ref":"/tags/vs-code"},{"name":"開発環境","ref":"/tags/開発環境"}],"showTerminalAside":false},{"title":"よくあるSPA+API構成でのOpenID Connectクライアント実装","date":"2022-12-02T00:00:00.000Z","ref":"/posts/2022/12/openid-connect-fastapi","desc":" この記事はニフクラ等を提供している、富士通クラウドテクノロジーズ Advent Calendar 2022の2日目の記事です。\n\n昨日は @ntoofu さんの パケットキャプチャからKubernetes APIのTLS通信を解析する でした。  \n私は TLS な時点でパケットキャプチャを諦めてしまいそうですが Linux の便利な仕組みと気合があれば TLS 1.3 のパケットキャプチャも可能だとわかり、とても有益でした。私もギークなエンジニア目指して頑張ります。\n\n今日は OpenID Connec","draft":false,"tags":[{"name":"OpenID Connect","ref":"/tags/openid-connect"},{"name":"認証/認可","ref":"/tags/認証-認可"},{"name":"SPA","ref":"/tags/spa"},{"name":"Python","ref":"/tags/python"},{"name":"FastAPI","ref":"/tags/fastapi"}],"showTerminalAside":false},{"title":"GitLab CIのrulesとworkflowを理解する","date":"2022-11-17T00:00:00.000Z","ref":"/posts/2022/11/gitlab-rules-workflow","desc":" GitLab CI の rules を使って Dockerfile などの特定のファイルの変更時のみ Docker イメージを作成するパイプラインを回して、それ以外の時には既存の Docker イメージを使用して CI を実行する、という組み方をしたかったのですが、書き方に結構手間取ったのでメモ。\n\n環境: GitLab.com 15.6.0-pre\n\n## rules とは\n\nhttps://docs.gitlab.com/ee/ci/yaml/#rules\n\nそれぞれのジョブについて、パイプラインに追","draft":false,"tags":[{"name":"GitLab","ref":"/tags/gitlab"},{"name":"CI/CD","ref":"/tags/ci-cd"}],"showTerminalAside":false},{"title":"Next.jsとTailwind CSSでブログを作るときに考えたこと","date":"2022-11-13T00:00:00.000Z","ref":"/posts/2022/11/blog-with-nextjs-and-tailwindcss","desc":" このブログは Next.js の SSG（Static Site Generation; 静的サイト生成）機能を使いながら、デザインの大半は Tailwind CSS を使用して整えています。そして生成された HTML, CSS, JS は GitHub Pages でホストさせてもらっています。\n\nそこそこの出来栄えになったので、今回はこのブログができるまでのお話をしたいなと思ったのですが、正直なところ、以下のリンク先のページを~~まるパク~~参考にさせてもらいながら作成したので、具体的な構築方法につい","draft":false,"tags":[{"name":"JavaScript","ref":"/tags/javascript"},{"name":"React","ref":"/tags/react"},{"name":"Next.js","ref":"/tags/next.js"},{"name":"Tailwind CSS","ref":"/tags/tailwind-css"}],"showTerminalAside":false},{"title":"Hello World!","date":"2022-10-11T00:00:00.000Z","ref":"/posts/2022/10/hello-world","desc":" はじめまして。  \nこれは初めての投稿です。\n\n今までブログが長く続いたことがないのですが、n度目の正直ということで今回こそは長く続くように頑張りたいと思います（とても固い決意）。\n\n@SogoKato といいます。どんな人か気になってくれた方は 自己紹介ページ をご覧いただければと思います。\n\nこのブログの制作にあたっては、初めて React + Next.js + Tailwind CSS を触って作ってみましたが、結構いい開発者体験だったのでこれについてもまた記事に起こしていきたいな〜と思っています","draft":false,"tags":[{"name":"Personal","ref":"/tags/personal"}],"showTerminalAside":false}],"post":{"title":"シンプル思考を徹底しよう：この半年の振り返り","date":"2023-06-25T00:00:00.000Z","ref":"/posts/2023/06/reflection","desc":" 先日、この半年くらい担当させてもらった仕事が一区切りついたので振り返りをしておこうかなと思います。\n\n全部よくある話だと思いますが、「経験しないとわからないこともあるものだ」ということで、今回は思考垂れ流し回です。\n\n## とにかく余裕を\n\n取り掛かり始めたころ、諸先輩方にファーストリリースではとにかく最低限のものを作るように言われたが、今ならそれが身に沁みてわかる。スケジュール的に余裕を持たせる効果のほか、エンハンスの伸びしろも大きくなるので、リリース後に機能拡充していくことで対外的な見た目が良くなる効","draft":false,"tags":[{"name":"Personal","ref":"/tags/personal"}],"showTerminalAside":false,"content":"\n先日、この半年くらい担当させてもらった仕事が一区切りついたので振り返りをしておこうかなと思います。\n\n全部よくある話だと思いますが、「経験しないとわからないこともあるものだ」ということで、今回は思考垂れ流し回です。\n\n## とにかく余裕を\n\n取り掛かり始めたころ、諸先輩方にファーストリリースではとにかく最低限のものを作るように言われたが、今ならそれが身に沁みてわかる。スケジュール的に余裕を持たせる効果のほか、エンハンスの伸びしろも大きくなるので、リリース後に機能拡充していくことで対外的な見た目が良くなる効果もあるという観点もあるっぽい。\n\n最低限動くもの（いわゆる MVP ってやつ）+ アルファくらいは作りたい思いが最初はあった。やっぱりせっかく作るならいいものを作りたいというのが人情だ。  \nとはいえ、会社でリリースするものなのだから、初期リリースでどれだけ機能が多いかよりも、機能が少なくても品質が高いことが優先される（少なくともうちの会社はそうだ）。ギリギリまで開発しているようでは十分な確認のための時間を取ることができない。\n\nしかも、開発中には色んな「想定外」がある。外的要因によって設計を見直さざるを得なくなることもあった。駆け出しあるあるだと思うが、思っていたより単純にやることが多かったりもした。ある程度作ってから「やっぱ違う」となることも、動作確認で不具合を見つけることもあった。\n\nこうした変更に柔軟に対応できるようにするための唯一の対策が、余裕を持っておくことだ。  \n結果的にここは割とうまくいった。\n\n## チーム外とのやりとりは丁寧に。チームメンバーの力は借りまくれ\n\n何かを作るとき、たいていは他のチームの協力なしでは不可能だ（それが会社だから）。\n\nだが、他チームの人にはそのチームの都合があるので、無条件に何でも協力してくれるわけではない。早めに頭出しをして、握ることは握り、証跡を分かりやすく残す。更新があったら伝え、混乱が起こらないようにする。基本的にテキストベースのコミュニケーションだとしても、交換できる情報量を増やしミスコミュニケーションを防ぐために最低1回はちゃんと会議を設けたほうがいい。これはとても大事だ（私は一回失敗した）。\n\n一方で、チームメンバーの力は存分に頼るべきだ。\n\n一人で唸る時間よりもチームメンバーと議論するほうが何倍も有意義。まずは相談したい事項や論点を整理して、チームメンバーと議論するということを何度もやった。週に1回、最大2時間の「もくもく会」があるのだが、今となってはお互いの相談事項を持ち寄る会になっており、全然もくもくしていない。あまりに会議時間が多いと作業の阻害になるのだが、このくらいの間隔・長さで他のメンバーに相談する・他のメンバーの相談を聞く会があるのは個人的にちょうどよく、チームビルディング的にうまくいっていると思う。\n\n## いかにシンプルさを保つかが重要\n\nいかにシンプルさを保つかがサービスを開発する上でも、運用していく上でも重要だということを実感した。\n\n機能を増やすことはすなわち複雑性を増やすことだ。コードベースの上では検証しなくてはいけないクラスや if の分岐を増やし、さらにはインフラレベルで管理すべきコンポーネントを増やさなくてはいけない場合もある。なので、機能を増やすということは無条件に歓迎されるものではないのだ。\n\nまず、その機能が本当に役に立つのかをユーザーのユースケースを洗い出して検討する。優先度が高くなさそうであればサービス開始後に利用状況を見ながら考えるのでも十分だ。次に、その機能をどのように実現するかいくつかの案を出す。大抵の場合は実現方法が1つであることはないので、それぞれに一長一短な案を考え、前述のようにチームメンバーと検討する。その際に重視すべき観点の1つが「シンプルさ」だ。\n\n今回の仕事の中で、自分にはユーザーにとって便利そうな機能を付けたい、ユーザーにとって易しくしたい、という思いが比較的強いということを認識した。もちろん、これ自体は悪いことではないのだが、システムのシンプルさという面ではマイナスであることが多い。ベテランのエンジニアはシンプルにシステムを作り運用することに長けていたので、採り入れるべき対極の意見をしばしば出してくれた。今回の仕事でそのあたりのバランスを見極める力が多少はついたと思う。\n\n## おわりに\n\nこれからもがんばります。\n"}},"__N_SSG":true}