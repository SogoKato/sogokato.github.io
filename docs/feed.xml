<?xml version="1.0" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sogo.dev</title>
    <link>https://sogo.dev</link>
    <description>@SogoKatoのブログ。技術系の記事を書きます。</description>
    <language>ja</language>
    <lastBuildDate>Sat, 18 Nov 2023 00:00:00 GMT</lastBuildDate>
    <atom:link href="https://sogo.dev/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RyeをDockerで使う時のポイント</title>
      <link>https://sogo.dev/posts/2023/11/rye-with-docker</link>
      <guid>https://sogo.dev/posts/2023/11/rye-with-docker</guid>
      <pubDate>Sat, 18 Nov 2023 00:00:00 GMT</pubDate>
      <description> Rye は Rust 製の Python パッケージマネージャです。まだ「実験的」なステータスなので全ての方にお勧めできる段階ではないかもしれないですが、十分に実用的で安定していると思います。Pipenv や Poetry との違いは、パッケージ管理だけでなく、Python バージョンの管理までやってくれるところが特徴で、Pipenv/Poetry + pyenv が1つのツールにまとまっているイメージです。

さて、今回は Rye を Docker コンテナで使う時のポイントをまとめてみました。Rye </description>
    </item>
    <item>
      <title>AWS SigV4リクエストの「検証する側」を実装する</title>
      <link>https://sogo.dev/posts/2023/11/implementing-aws-sigv4-server</link>
      <guid>https://sogo.dev/posts/2023/11/implementing-aws-sigv4-server</guid>
      <pubDate>Thu, 09 Nov 2023 00:00:00 GMT</pubDate>
      <description> 世の中には AWS Signature V4 署名の実装方法についての記事はたくさんありますが、その署名を付与して検証する側（サーバー）の実装方法について見つけるのは難しいです。AWS API Gateway を使えば簡単に自分で書かなくても良いのでそれはそうなのですが、AWS SigV4 は curl のオプションとしても使える くらいの地位を獲得しているので、AWS SigV4 を利用した認証機能の実装方法についての記事があってもいいでしょう。

ということで、今回は Python と FastAPI</description>
    </item>
    <item>
      <title>Bitwardenブラウザ拡張がPasskeyに対応したので試してみた</title>
      <link>https://sogo.dev/posts/2023/11/bitwarden-passkey</link>
      <guid>https://sogo.dev/posts/2023/11/bitwarden-passkey</guid>
      <pubDate>Wed, 08 Nov 2023 00:00:00 GMT</pubDate>
      <description> パスワードマネージャによる Passkey のサポートが進んでいます。

私は Bitwarden を使ってパスワードなどの機密情報を保存しているのですが、ついに Bitwarden による Passkey 対応が始まりました。公式ブログでも11月7日に投稿されています。

## 環境

* Bitwarden Firefox アドオン 2023.10.1
* Firefox 118.0.2

## 試してみる

既にいくつものサービスが Passkey 対応していますが、今回は Google アカウント</description>
    </item>
    <item>
      <title>GitLabのRemote developmentを試してみる</title>
      <link>https://sogo.dev/posts/2023/10/gitlab-remote-development</link>
      <guid>https://sogo.dev/posts/2023/10/gitlab-remote-development</guid>
      <pubDate>Tue, 24 Oct 2023 00:00:00 GMT</pubDate>
      <description> VS Code Serverでリモートホストのコンテナ上開発環境に直接アクセスするの記事にて GitHub でやっている「ぼくのかんがえたさいきょうのかいはつかんきょう」第2弾です。今回は GitLab を使ってリモート開発環境を構築してみたいと思います。  
なお、GitLab には Premium 以上のライセンスで使える Workspaces という機能が 16.0 で登場しましたが、今回はそれではなく、自分でコンテナを立ててそこにアクセスする形になります。こちらは無料ライセンスで使えます。ただし執</description>
    </item>
    <item>
      <title>GitHub ActionsでGo製ツールをビルド&リリース【GoReleaser】</title>
      <link>https://sogo.dev/posts/2023/09/github-actions-goreleaser</link>
      <guid>https://sogo.dev/posts/2023/09/github-actions-goreleaser</guid>
      <pubDate>Tue, 26 Sep 2023 00:00:00 GMT</pubDate>
      <description> 前回の記事で紹介した nifdiff をリリースする際に、簡単に GitHub actions を使って Go 製ツールをビルドしてリリースする方法を見つけたのでメモです。

## ポイント

* GoReleaser を使うと Go で作ったソフトウェアを素早く出荷できる
* kyoh86/git-vertag-action を使うと最新のバージョンから +1 メジャー・マイナー・パッチバージョンアップしたバージョンのタグを作成できる

## 今回やったこと

* Go 製ツールをクロスコンパイルして、</description>
    </item>
    <item>
      <title>ニフクラのリソースを比較できるツールnifdiffを作った</title>
      <link>https://sogo.dev/posts/2023/09/nifdiff</link>
      <guid>https://sogo.dev/posts/2023/09/nifdiff</guid>
      <pubDate>Mon, 25 Sep 2023 00:00:00 GMT</pubDate>
      <description> 2つのファイアウォールグループのルールの差分を見たいことがあって、ちょっとしたツールを作ってみました。

## nifdiff とは

* 2つのニフクラリソースの差分を見ることができるツール
* 同一アカウント内であれば、リージョンまたぎで比較できる
* 現状対応しているのはファイアウォールグループのみ

https://github.com/SogoKato/nifdiff

こんな感じのコマンドを投げると

```
nifdiff nrn:nifcloud:computing:jp-east-1::</description>
    </item>
    <item>
      <title>AWS Certified Solutions Architect - Professionalを取得した</title>
      <link>https://sogo.dev/posts/2023/09/aws-solutions-architect-professional</link>
      <guid>https://sogo.dev/posts/2023/09/aws-solutions-architect-professional</guid>
      <pubDate>Thu, 21 Sep 2023 00:00:00 GMT</pubDate>
      <description> AWS 認定ソリューションアーキテクト - Professional (SAP-C02) の資格を取得したので学習メモです。

過去の資格に関する記事はこちら
* AWS Certified Solutions Architect - Associateを取得した
* CKAD受検記録【2023年版】
* GCP未経験の新卒2年目がAssociate Cloud EngineerとProfessional Cloud Architectを連続で受検したときの記録
* 新卒エンジニアがCKA取得を目指してK</description>
    </item>
    <item>
      <title>FluentdをDocker SwarmにDaemonSet的に配置してログを収集する</title>
      <link>https://sogo.dev/posts/2023/09/fluentd-docker-swarm</link>
      <guid>https://sogo.dev/posts/2023/09/fluentd-docker-swarm</guid>
      <pubDate>Fri, 15 Sep 2023 00:00:00 GMT</pubDate>
      <description> Docker Swarm 上のサービスのログを fluentd を使って送信するためのメモです。

Kubernetes で同様のことを実現する場合、Forwarder として使う fluentd を DaemonSet として起動してノード上のログを集めさせることが一般的です。今回は Swarm クラスター内の各ノードに1つずつ fluentd を起動して、あるノード上で動くコンテナのログはそのノード上の fluentd に集まるように設定していきます。

## ポイント

* 各ノードに配置するには </description>
    </item>
    <item>
      <title>Raspberry Pi Zero WHにVolumio 3を入れる場合は2系からアップグレードする</title>
      <link>https://sogo.dev/posts/2023/09/volumio-raspberrypi-zero</link>
      <guid>https://sogo.dev/posts/2023/09/volumio-raspberrypi-zero</guid>
      <pubDate>Sat, 09 Sep 2023 00:00:00 GMT</pubDate>
      <description> 掲題の通りです。今更ながら、その辺に転がっているラズパイゼロ（初代、Wi-Fi 付）とその辺に転がっている中華 USB-DAC を使って Spotify Connect 用の環境を整えようと Volumio を入れてみました。

## 使ったもの

* Raspberry Pi Zero WH
* Micro SD
* 電源（Apple の 5W 1A のやつで十分）
* Micro USB ケーブル
* USB OTG ケーブル（Micro USB オスから USB A メスに変換するやつ）
* Min</description>
    </item>
    <item>
      <title>AWS Certified Solutions Architect - Associateを取得した</title>
      <link>https://sogo.dev/posts/2023/08/aws-solutions-architect-associate</link>
      <guid>https://sogo.dev/posts/2023/08/aws-solutions-architect-associate</guid>
      <pubDate>Sun, 13 Aug 2023 00:00:00 GMT</pubDate>
      <description> AWS 認定ソリューションアーキテクト - Associate (SAA-C03) の資格を取得したので学習メモです。

過去の資格に関する記事はこちら
* CKAD受検記録【2023年版】
* GCP未経験の新卒2年目がAssociate Cloud EngineerとProfessional Cloud Architectを連続で受検したときの記録
* 新卒エンジニアがCKA取得を目指してKubernetesを勉強したときの記録

続きの記事 → AWS Certified Solutions Arc</description>
    </item>
    <item>
      <title>SynologyのHyper Backupを使って自分のサーバーへバックアップ（rsync over SSH）</title>
      <link>https://sogo.dev/posts/2023/07/synology-hyper-backup-rsync-over-ssh</link>
      <guid>https://sogo.dev/posts/2023/07/synology-hyper-backup-rsync-over-ssh</guid>
      <pubDate>Sat, 22 Jul 2023 00:00:00 GMT</pubDate>
      <description> 先日 Synology の NAS を導入したのですが、耐障害性を考慮すると別の拠点とのバックアップが欲しくなってきます。Synology の NAS は QuickConnect を利用することで Synology 社のサーバーを経由することで、自宅のポートを開放せずに構築することができるのがメリットです。バックアップ用途のためだけでにポートを開放するのはアレなので、自宅からのアウトバウンドの通信で定期的にバックアップを行う方法を検討しました。

## 構成

超シンプル構成です。

!構成図

NAS</description>
    </item>
    <item>
      <title>Fluentdでニフクラのオブジェクトストレージサービスにログを送る</title>
      <link>https://sogo.dev/posts/2023/07/fluentd-nifcloud-object-storage-service</link>
      <guid>https://sogo.dev/posts/2023/07/fluentd-nifcloud-object-storage-service</guid>
      <pubDate>Wed, 05 Jul 2023 00:00:00 GMT</pubDate>
      <description> Fluentd の fluent-plugin-s3 を使ってニフクラのオブジェクトストレージサービスにログをアップロードする時のメモです。

## ポイント

* `s3_endpoint` を指定する
  * https://jp-east-1.storage.api.nifcloud.com または https://jp-west-2.storage.api.nifcloud.com
  * 参照: エンドポイント
* `force_path_style` を true にする
  * オブジェクト</description>
    </item>
    <item>
      <title>シンプル思考を徹底しよう：この半年の振り返り</title>
      <link>https://sogo.dev/posts/2023/06/reflection</link>
      <guid>https://sogo.dev/posts/2023/06/reflection</guid>
      <pubDate>Sun, 25 Jun 2023 00:00:00 GMT</pubDate>
      <description> 先日、この半年くらい担当させてもらった仕事が一区切りついたので振り返りをしておこうかなと思います。

全部よくある話だと思いますが、「経験しないとわからないこともあるものだ」ということで、今回は思考垂れ流し回です。

## とにかく余裕を

取り掛かり始めたころ、諸先輩方にファーストリリースではとにかく最低限のものを作るように言われたが、今ならそれが身に沁みてわかる。スケジュール的に余裕を持たせる効果のほか、エンハンスの伸びしろも大きくなるので、リリース後に機能拡充していくことで対外的な見た目が良くなる効</description>
    </item>
    <item>
      <title>KubernetesのPodからラズパイのGPIOを操作する</title>
      <link>https://sogo.dev/posts/2023/06/k8s-raspi-gpio</link>
      <guid>https://sogo.dev/posts/2023/06/k8s-raspi-gpio</guid>
      <pubDate>Sat, 24 Jun 2023 00:00:00 GMT</pubDate>
      <description> 今まで Docker Compose で動かしてたアプリを Kubernetes に移植したときのメモです。

## Docker Compose では

Docker の `--device` オプションと同じ記法で指定できていました。

```yaml
services:
  app:
    image: hoge
    devices:
      - /dev/gpiomem
```

## Kubernetes では

デバイスプラグインを使用して Kubelet にハードウェアリソースを知</description>
    </item>
    <item>
      <title>Ubuntu 22.04ではusercfg.txtがデフォルトでincludeされていないので注意</title>
      <link>https://sogo.dev/posts/2023/06/ubuntu-22.04-raspi-config.txt</link>
      <guid>https://sogo.dev/posts/2023/06/ubuntu-22.04-raspi-config.txt</guid>
      <pubDate>Wed, 14 Jun 2023 00:00:00 GMT</pubDate>
      <description> タイトルの通りです。これにしばらくハマってしまったので戒めのために書いておきます。

## tl;dr

Ubuntu 20.04 の時と同じ設定ファイルをラズパイの /boot/firmware に入れていたけど反映されていなかった。調べてみたらそのファイルを include する文が Ubuntu 22.04 では消されていた。

## そもそも config.txt とは？

> The Raspberry Pi uses a configuration file instead of the BI</description>
    </item>
    <item>
      <title>ラズパイでK3sクラスター構築</title>
      <link>https://sogo.dev/posts/2023/06/k3s-setup</link>
      <guid>https://sogo.dev/posts/2023/06/k3s-setup</guid>
      <pubDate>Tue, 13 Jun 2023 00:00:00 GMT</pubDate>
      <description> 今まで kubeadm でクラスター運用をしていたのですが、ラズパイくんたちのお引越しの関係で再構築することにしました。Raspberry Pi 4B 2GB や 3A+（RAM 512MB）も join させたかったこともあり、エッジ環境での動作も想定されている K3s を選びました。

## 環境

* Raspberry Pi 4B 8GB x 2, Raspberry Pi 4B 4GB x 1, Raspberry Pi 4B 2GB x 1
  * SSD ブート
  * PoE+ 電源
  </description>
    </item>
    <item>
      <title>CeleryにおけるSQLAlchemyのセッション管理</title>
      <link>https://sogo.dev/posts/2023/05/celery-sqlalchemy</link>
      <guid>https://sogo.dev/posts/2023/05/celery-sqlalchemy</guid>
      <pubDate>Mon, 15 May 2023 00:00:00 GMT</pubDate>
      <description> 前回の記事では SQLAlchemy の Session について解説しました。今回はその応用として、Celery においてどのように Session を管理するかを考えたいと思います。

関連記事：
* SQLAlchemyのセッション・トランザクションを理解する
* SQLAlchemyで'MySQL server has gone away'が発生した時の対処法2つ

## 結論

以下のように DB 操作を行うタスクのためのクラスを作ります。

```python
from typing impo</description>
    </item>
    <item>
      <title>SQLAlchemyのセッション・トランザクションを理解する</title>
      <link>https://sogo.dev/posts/2023/05/sqlalchemy-sessions-and-transactions</link>
      <guid>https://sogo.dev/posts/2023/05/sqlalchemy-sessions-and-transactions</guid>
      <pubDate>Sun, 14 May 2023 00:00:00 GMT</pubDate>
      <description> SQLAlchemy の Session や scoped_session、トランザクションに関して理解していきます。

## 用語おさらい

### セッション（Session）

SQLAlchemy の Session オブジェクトは、ORM マッピングされたオブジェクトの永続化に関する操作を管理するオブジェクトです。

`sqlalchemy.orm.Session` を直接インスタンス化しても良いですが、実環境では sessionmaker を使うことが一般的です。sessionmaker は </description>
    </item>
    <item>
      <title>Reactで検索・ソート可能なDataTableを自作する</title>
      <link>https://sogo.dev/posts/2023/04/datatable-react</link>
      <guid>https://sogo.dev/posts/2023/04/datatable-react</guid>
      <pubDate>Sat, 22 Apr 2023 00:00:00 GMT</pubDate>
      <description> 最近、MUI の妹分の UI ライブラリである Joy-UI を使ってます。現在進行形で活発に開発が進んでいて、設計（デザイン）も今時な感じで好感触です。ところどころまだ開発されていないコンポーネントもちらほらあるものの、ドキュメントには代替策がコード付きで載っていてとても親切です。

MUI X というより発展的なコンポーネントをもつ UI ライブラリもあるのですが、そこに今回のテーマである「データテーブル」に該当する Data Grid というものがあります。これは超すごくて、雑に言うと Excel </description>
    </item>
    <item>
      <title>Kanikoでコンテナイメージつくるならcache=trueは有効にしておこう</title>
      <link>https://sogo.dev/posts/2023/04/kaniko-cache</link>
      <guid>https://sogo.dev/posts/2023/04/kaniko-cache</guid>
      <pubDate>Tue, 18 Apr 2023 00:00:00 GMT</pubDate>
      <description> !ぜんぜんわからない　俺たちは雰囲気でカニコをやっている

恥ずかしながら、わたしは雰囲気で kaniko にコンテナイメージのビルドをしてもらっていることに気づきました。1年以上 GitLab CI で kaniko を使っておきながら、ただ「特権コンテナを使わずにイメージつくれるやつ」くらいの認識しかしていなかったです。

## kaniko の cache=true オプション

kaniko には `--cache` というフラグがあり、これを true にすることでコンテナのビルド時にキャッシュ</description>
    </item>
    <item>
      <title>IPoE回線の自宅のWebサービスをVPN経由で固定IPのクラウドから公開する</title>
      <link>https://sogo.dev/posts/2023/04/reverse-proxy-to-home-ipoe-network</link>
      <guid>https://sogo.dev/posts/2023/04/reverse-proxy-to-home-ipoe-network</guid>
      <pubDate>Sat, 15 Apr 2023 00:00:00 GMT</pubDate>
      <description> PPPoE 回線が遅いので IPoE（IPv4 over IPv6）へ移行しようと思いました。以前は2つのルーターを使って、PPPoE と IPoE の2セッションを張ることができたのですが、ある時からできなくなり、しばらく PPPoE だけで生活していました。とはいえやはり遅い、遅すぎる……ということで、今回の記事に至ります。

IPoE に移行するにあたっての課題は**任意のポートを開放できないこと**です。

代わりの方法を考えていたところ、ちょうど手元に1台 AWS Lightsail のサーバー</description>
    </item>
    <item>
      <title>CKAD受検記録【2023年版】</title>
      <link>https://sogo.dev/posts/2023/03/certified-kubernetes-application-developer</link>
      <guid>https://sogo.dev/posts/2023/03/certified-kubernetes-application-developer</guid>
      <pubDate>Thu, 30 Mar 2023 00:00:00 GMT</pubDate>
      <description> 2023年3月30日に Certified Kubernetes Application Developer (CKAD) を受験し、合格しましたのでその受検記録記事です。ちょうど1年前に Certified Kuberenetes Administrator (CKA) を取っていたので、その続きとなります。

前回の記事：新卒エンジニアがCKA取得を目指してKubernetesを勉強したときの記録

## 対象読者

* Kubernetes を使っているが、資格はまだ取ってない人
* CKA を取っ</description>
    </item>
    <item>
      <title>PyScriptを使ってブログのサンプルコードを実行させる</title>
      <link>https://sogo.dev/posts/2023/03/pyscript-codeblock</link>
      <guid>https://sogo.dev/posts/2023/03/pyscript-codeblock</guid>
      <pubDate>Mon, 06 Mar 2023 00:00:00 GMT</pubDate>
      <description> 前回の記事を書くときに WebAssembly でブログのコードブロックのコードを実行させられたら面白いかも、ということで PyScript を使って実装してみました。React &amp; Next.js で使う際の注意点についても書こうと思います。

以下については前提知識としてこの記事では解説しません。

* PyScript
* Pyodide
* WebAssembly
* react-markdown のコードブロック（バッククォート3つ \```）をカスタマイズする方法

## やったこと

* r</description>
    </item>
    <item>
      <title>Pythonのunittest.mock.patchではどこにパッチするかが重要</title>
      <link>https://sogo.dev/posts/2023/03/python-unittest-mock-where-to-patch</link>
      <guid>https://sogo.dev/posts/2023/03/python-unittest-mock-where-to-patch</guid>
      <pubDate>Sat, 04 Mar 2023 00:00:00 GMT</pubDate>
      <description> Python 公式ドキュメントの unittest.mock のページにドンピシャの内容が書いてありますが、なかなか気づけずにハマってしまっていたのでメモです。

`unittest.mock.patch` でパッチしたけど当たってない気がする人は参考にしてみてください。

下記の引用に要点が凝縮されています。

> ### どこにパッチするか
>
> `patch()` は (一時的に) ある 名前 が参照しているオブジェクトを別のものに変更することで適用されます。任意のオブジェクトには、それを参照する</description>
    </item>
    <item>
      <title>Ansibleでgpg公開鍵とaptのサードパーティリポジトリを追加する ～Terraformをインストールしたい～</title>
      <link>https://sogo.dev/posts/2023/03/ansible-apt-repo-signed-by-gpg-key</link>
      <guid>https://sogo.dev/posts/2023/03/ansible-apt-repo-signed-by-gpg-key</guid>
      <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
      <description> apt を使って docker や terraform をインストールする時など、提供元のサードパーティ apt リポジトリを追加する場合が結構ありますよね。その際に、今までは `apt-key` を使って OpenPGP 公開鍵をインポートしていたのですが、`apt-key` は Debian 11 と Ubuntu 22.04 を最後に使えなくなる ので、今後は `gnupg` を使った方法が主流になっていきます。

Ansible にも ansible.builtin.apt_key module </description>
    </item>
    <item>
      <title>TerraformでAPI Gatewayのスロットリングを設定する</title>
      <link>https://sogo.dev/posts/2023/02/aws-api-gateway-terraform-throttling-settings</link>
      <guid>https://sogo.dev/posts/2023/02/aws-api-gateway-terraform-throttling-settings</guid>
      <pubDate>Thu, 23 Feb 2023 00:00:00 GMT</pubDate>
      <description> AWS API Gateway のスロットリングを Terraform を使って設定する方法を見つけるまでに少し手間取ったのでメモ。

## AWS マネジメントコンソールでの場所

今回 Terraform で設定するのは、マネジメントコンソールの各ステージの設定画面内の「デフォルトのメソッドスロットリング」に該当する箇所です。

!management console

## そもそも API Gateway のスロットリングとは

API Gateway では API が1秒あたりに処理できるリクエ</description>
    </item>
    <item>
      <title>プロセス外依存は統合テストで確認しよう：単体テストの考え方／使い方 第3部</title>
      <link>https://sogo.dev/posts/2023/02/unit-testing-principles-practices-and-patterns-part3</link>
      <guid>https://sogo.dev/posts/2023/02/unit-testing-principles-practices-and-patterns-part3</guid>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <description> 『単体テストの考え方／使い方』（Vladimir Khorikov 著、須田智之訳）を読んだので、そのまとめを部ごとに書いていこうと思います。

1. 単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部
1. リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半
1. ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半
1. プロセス外依存は統合テストで確認しよう：単体テストの考え方／使い方 第3部（こ</description>
    </item>
    <item>
      <title>ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半</title>
      <link>https://sogo.dev/posts/2023/02/unit-testing-principles-practices-and-patterns-part2-2</link>
      <guid>https://sogo.dev/posts/2023/02/unit-testing-principles-practices-and-patterns-part2-2</guid>
      <pubDate>Sun, 19 Feb 2023 00:00:00 GMT</pubDate>
      <description> 『単体テストの考え方／使い方』（Vladimir Khorikov 著、須田智之訳）を読んでいるので、そのまとめを部ごとに書いていこうと思います。

1. 単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部
1. リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半
1. ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半（この記事）
1. プロセス外依存は統合テストで確認しよう：単体テストの考え方／使</description>
    </item>
    <item>
      <title>FastAPIとSQLAlchemy2.0ならもう型ヒントを諦めなくていい</title>
      <link>https://sogo.dev/posts/2023/02/fastapi-orm-sqlalchemy</link>
      <guid>https://sogo.dev/posts/2023/02/fastapi-orm-sqlalchemy</guid>
      <pubDate>Wed, 08 Feb 2023 00:00:00 GMT</pubDate>
      <description> サチコ（Google Search Console）を眺めていたら `FastAPI MySQL` がそれなりに需要ありそうと思ったので、FastAPI と SQLAlchemy を組み合わせて ORM を使う方法を紹介したいと思います。最近の SQLAlchemy（1.4以降）ではマッピングされたオブジェクトに型を適用することもできるので、型ヒントを活かして型安全なコードを書くことも難しくなくなっています。

## 環境

* Python 3.10.6
* FastAPI 0.89.1
* SQLAl</description>
    </item>
    <item>
      <title>TypedDictはdictのsubtypeではないので関数の引数にはMappingを使う</title>
      <link>https://sogo.dev/posts/2023/02/typeddict-is-not-subtype-of-dict</link>
      <guid>https://sogo.dev/posts/2023/02/typeddict-is-not-subtype-of-dict</guid>
      <pubDate>Mon, 06 Feb 2023 00:00:00 GMT</pubDate>
      <description> Python の dict（辞書）を TypeScript の interface のように扱えて便利な TypedDict ですが、**dict のサブクラスではない**というのが少し落とし穴だなと思ったのでメモ。

## まずは PEP を見よう

大抵のことは公式ドキュメントを見れば書いてあります。今回も例外なくそうでした。

> First, any TypedDict type is consistent with `Mapping[str, object]`.

https://peps.py</description>
    </item>
    <item>
      <title>リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半</title>
      <link>https://sogo.dev/posts/2023/02/unit-testing-principles-practices-and-patterns-part2-1</link>
      <guid>https://sogo.dev/posts/2023/02/unit-testing-principles-practices-and-patterns-part2-1</guid>
      <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
      <description> 『単体テストの考え方／使い方』（Vladimir Khorikov 著、須田智之訳）を読んでいるので、そのまとめを部ごとに書いていこうと思います。

1. 単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部
1. リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半（この記事）
1. ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半
1. プロセス外依存は統合テストで確認しよう：単体テストの考え方／使</description>
    </item>
    <item>
      <title>単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部</title>
      <link>https://sogo.dev/posts/2023/01/unit-testing-principles-practices-and-patterns-part1</link>
      <guid>https://sogo.dev/posts/2023/01/unit-testing-principles-practices-and-patterns-part1</guid>
      <pubDate>Tue, 17 Jan 2023 00:00:00 GMT</pubDate>
      <description> 『単体テストの考え方／使い方』（Vladimir Khorikov 著、須田智之訳）を読んでいるので、そのまとめを部ごとに書いていこうと思います。

1. 単体テストの目的・定義・学派・命名について：単体テストの考え方／使い方 第1部（この記事）
1. リファクタリングしやすいテストを書こう：単体テストの考え方／使い方 第2部前半
1. ビジネス・ロジックと連携の指揮を分離すれば良いテストが書ける：単体テストの考え方／使い方 第2部後半
1. プロセス外依存は統合テストで確認しよう：単体テストの考え方／使</description>
    </item>
    <item>
      <title>SQLAlchemyで'MySQL server has gone away'が発生した時の対処法2つ</title>
      <link>https://sogo.dev/posts/2023/01/sqlalchemy-dealing-with-disconnects</link>
      <guid>https://sogo.dev/posts/2023/01/sqlalchemy-dealing-with-disconnects</guid>
      <pubDate>Thu, 12 Jan 2023 00:00:00 GMT</pubDate>
      <description> FastAPI で SQLAlchemy を使っている時に、コンテナを立てた直後は問題ないけど一定時間経過後に DB 接続が切れてしまう問題に遭遇したのでその時に調べたことのメモ。

## 環境

* mysql 5.7.15
* SQLAlchemy 1.4.45
* mysqlclient 2.1.1

## 問題

```
MySQLdb.OperationalError: (2006, 'MySQL server has gone away')
```

最後に MySQL サーバーに接続してから</description>
    </item>
    <item>
      <title>2023年版 キーボードマッピングの個人的メモ</title>
      <link>https://sogo.dev/posts/2023/01/keyboard-remap</link>
      <guid>https://sogo.dev/posts/2023/01/keyboard-remap</guid>
      <pubDate>Sun, 08 Jan 2023 00:00:00 GMT</pubDate>
      <description> 不定期的に「あーでもない、こーでもない」と言ってキーボードのマッピングをいじりだしてしまうことってありますよね。私はあります。限りあるキーの中から自分にとっての最適解を見つける作業はなんだかんだ楽しいです。

今回は 2023 年版、私のキーボードのマッピングを書きとめておこうと思います。

過去の記事: Windows10 と PowerToys で US キーボードでも無変換・変換キーを使って IME を一発で切り替える

## 環境

* 使うパソコン
  * Windows デスクトップ
  * </description>
    </item>
    <item>
      <title>プロキシ環境でKubernetes構築（Containerd+Calico）</title>
      <link>https://sogo.dev/posts/2022/12/kubernetes-behind-proxy</link>
      <guid>https://sogo.dev/posts/2022/12/kubernetes-behind-proxy</guid>
      <pubDate>Tue, 27 Dec 2022 00:00:00 GMT</pubDate>
      <description> 同期と一緒にトラシュしたので、プロキシ環境下で kubeadm + Containerd + Calico の Kubernetes クラスターを構築する方法について記録を残します。

## 環境

* Ubuntu 22.04
  * サーバーはニフクラを利用（e-medium4 2vCPU/4GB）
* Kubernetes v1.26.0
* kubeadm v1.26.0
* Containerd v1.6.14
* Calico v3.24.5

コントロールプレーン、ノード1台ずつの構成としま</description>
    </item>
    <item>
      <title>Ubuntu 22.04でのKubernetesクラスター構築（ContainerdとSystemdCgroup）</title>
      <link>https://sogo.dev/posts/2022/12/kubernetes-ubuntu22.04-cgroup-systemd</link>
      <guid>https://sogo.dev/posts/2022/12/kubernetes-ubuntu22.04-cgroup-systemd</guid>
      <pubDate>Mon, 26 Dec 2022 00:00:00 GMT</pubDate>
      <description> 公式ドキュメントのコマンドを手順通り流し込めば割と簡単に構築できる Kubernetes クラスターですが、Ubuntu 22.04 になってから少し手を入れる必要が出てきたので差分を紹介しておきます。

**2022-02-16 更新：Kubernetes ドキュメントの日本語版が更新されていたのでリライトしました。**

## 環境

* Ubuntu 22.04
* Kubernetes v1.26.0
* kubeadm v1.26.0
* Containerd v1.6.16

## 何が変わっ</description>
    </item>
    <item>
      <title>KubernetesでCoreDNSがループしてしまう問題への対処</title>
      <link>https://sogo.dev/posts/2022/12/kubernetes-coredns-loop</link>
      <guid>https://sogo.dev/posts/2022/12/kubernetes-coredns-loop</guid>
      <pubDate>Sat, 24 Dec 2022 00:00:00 GMT</pubDate>
      <description> 1年前にも Kubernetes クラスターを自力で組んでトラブルシューティングしてみる【The Hard Way】の記事の中で軽く解説したネタです。

## 環境

* Ubuntu 22.04
* Kubernetes v1.26.0
* kubeadm v1.26.0

## 問題

Kubernetes クラスター内で名前解決に使われる CoreDNS の Pod が `CrashLoopBackOff` になってしまい再起動を繰り返す問題が発生することがあります。

```
# kubectl </description>
    </item>
    <item>
      <title>VS Code Serverでリモートホストのコンテナ上開発環境に直接アクセスする</title>
      <link>https://sogo.dev/posts/2022/12/vscode-server-devcontainer</link>
      <guid>https://sogo.dev/posts/2022/12/vscode-server-devcontainer</guid>
      <pubDate>Sat, 17 Dec 2022 00:00:00 GMT</pubDate>
      <description> 今回は「ぼくのかんがえたさいきょうのかいはつかんきょう」を紹介したいと思います。

VS Code Server を使い、リモートサーバー上でコンテナとして動かしている開発環境に直接乗り込んでみよう、というアイデアです。

SSH もポート開放も不要なのでとてもお手軽です。

## 2023/10/24 追記

GitLab のリモート開発環境も試してみました。

GitLabのRemote developmentを試してみる

## 2023/06/14 追記

以下で紹介する方法が最近は使えなくなって</description>
    </item>
    <item>
      <title>よくあるSPA+API構成でのOpenID Connectクライアント実装</title>
      <link>https://sogo.dev/posts/2022/12/openid-connect-fastapi</link>
      <guid>https://sogo.dev/posts/2022/12/openid-connect-fastapi</guid>
      <pubDate>Fri, 02 Dec 2022 00:00:00 GMT</pubDate>
      <description> この記事はニフクラ等を提供している、富士通クラウドテクノロジーズ Advent Calendar 2022の2日目の記事です。

昨日は @ntoofu さんの パケットキャプチャからKubernetes APIのTLS通信を解析する でした。  
私は TLS な時点でパケットキャプチャを諦めてしまいそうですが Linux の便利な仕組みと気合があれば TLS 1.3 のパケットキャプチャも可能だとわかり、とても有益でした。私もギークなエンジニア目指して頑張ります。

今日は OpenID Connec</description>
    </item>
    <item>
      <title>GitLab CIのrulesとworkflowを理解する</title>
      <link>https://sogo.dev/posts/2022/11/gitlab-rules-workflow</link>
      <guid>https://sogo.dev/posts/2022/11/gitlab-rules-workflow</guid>
      <pubDate>Thu, 17 Nov 2022 00:00:00 GMT</pubDate>
      <description> GitLab CI の rules を使って Dockerfile などの特定のファイルの変更時のみ Docker イメージを作成するパイプラインを回して、それ以外の時には既存の Docker イメージを使用して CI を実行する、という組み方をしたかったのですが、書き方に結構手間取ったのでメモ。

環境: GitLab.com 15.6.0-pre

## rules とは

https://docs.gitlab.com/ee/ci/yaml/#rules

それぞれのジョブについて、パイプラインに追</description>
    </item>
    <item>
      <title>Next.jsとTailwind CSSでブログを作るときに考えたこと</title>
      <link>https://sogo.dev/posts/2022/11/blog-with-nextjs-and-tailwindcss</link>
      <guid>https://sogo.dev/posts/2022/11/blog-with-nextjs-and-tailwindcss</guid>
      <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
      <description> このブログは Next.js の SSG（Static Site Generation; 静的サイト生成）機能を使いながら、デザインの大半は Tailwind CSS を使用して整えています。そして生成された HTML, CSS, JS は GitHub Pages でホストさせてもらっています。

そこそこの出来栄えになったので、今回はこのブログができるまでのお話をしたいなと思ったのですが、正直なところ、以下のリンク先のページを~~まるパク~~参考にさせてもらいながら作成したので、具体的な構築方法につい</description>
    </item>
    <item>
      <title>Hello World!</title>
      <link>https://sogo.dev/posts/2022/10/hello-world</link>
      <guid>https://sogo.dev/posts/2022/10/hello-world</guid>
      <pubDate>Tue, 11 Oct 2022 00:00:00 GMT</pubDate>
      <description> はじめまして。  
これは初めての投稿です。

今までブログが長く続いたことがないのですが、n度目の正直ということで今回こそは長く続くように頑張りたいと思います（とても固い決意）。

@SogoKato といいます。どんな人か気になってくれた方は 自己紹介ページ をご覧いただければと思います。

このブログの制作にあたっては、初めて React + Next.js + Tailwind CSS を触って作ってみましたが、結構いい開発者体験だったのでこれについてもまた記事に起こしていきたいな〜と思っています</description>
    </item>
  </channel>
</rss>